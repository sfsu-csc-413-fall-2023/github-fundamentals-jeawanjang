package lexer.tools;

import java.io.IOException;
import java.nio.file.Files;
import java.util.Iterator;
import java.util.List;

import config.LexerConfiguration;

public abstract class TokenTool implements Iterator<String> {
  private List<String> lines;
  private int index;

  public abstract void regenerateSourceFile();

  public TokenTool() {
    this.index = 0;

    try {
      this.lines = Files.readAllLines(LexerConfiguration.TOKEN_FILE_PATH);
    } catch (IOException e) {
      this.failExecution(e);
    }
  }

  @Override
  public boolean hasNext() {
    return this.index < this.lines.size();
  }

  @Override
  public String next() {
    if (!hasNext()) {
      return "";
    }

    return this.lines.get(this.index++);
  }

  protected String getIndentation(int indentationSize) {
    StringBuffer buffer = new StringBuffer();

    for (int indent = 0; indent < indentationSize; indent++) {
      buffer.append("  ");
    }

    return buffer.toString();
  }

  protected String getNewLines(int numberOfNewLines) {
    StringBuffer buffer = new StringBuffer();

    for (int newLine = 0; newLine < numberOfNewLines; newLine++) {
      buffer.append(System.lineSeparator());
    }

    return buffer.toString();
  }

  protected String getComment(String content) {
    return String.format("// %s", content);
  }

  protected String getAutoGeneratedWarning() {
    StringBuffer buffer = new StringBuffer();

    buffer.append("/**");
    buffer.append(getNewLines(1));
    buffer.append(" * This file is automatically generated!");
    buffer.append(getNewLines(1));
    buffer.append(" * Do not manually update! (Use the ToolRunner to regenerate.)");
    buffer.append(getNewLines(1));
    buffer.append(" **/");

    return buffer.toString();
  }

  protected void failExecution(Exception exception) {
    System.err.println(String.format("The TokenTool %s failed to run:", this.getClass().getName()));
    exception.printStackTrace();
    System.exit(1);
  }
}

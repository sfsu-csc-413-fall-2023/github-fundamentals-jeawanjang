package lexer.tools;

import java.io.FileWriter;
import java.io.IOException;
import java.util.List;

import config.LexerConfiguration;

public class SymbolTableGenerator extends TokenTool {

  private String sourceCodePrefix = String.join("", List.of(
      String.format("package %s;", LexerConfiguration.LEXER_PACKAGE),
      this.getNewLines(2),
      "import java.util.Map;",
      this.getNewLines(1),
      "import java.util.HashMap;",
      this.getNewLines(1),
      "import lexer.daos.TokenKind;",
      this.getNewLines(1),
      "import lexer.daos.Symbol;",
      this.getNewLines(2),
      this.getAutoGeneratedWarning(),
      this.getNewLines(1),
      String.format("public class %s {", LexerConfiguration.UNIQUE_SYMBOL_MAP_CLASS_NAME),
      this.getNewLines(1),
      this.getIndentation(1),
      "private static Map<String, Symbol> symbols;",
      this.getNewLines(2),
      this.getIndentation(1),
      "static {",
      this.getNewLines(1),
      this.getIndentation(2),
      "symbols = new HashMap<>();",
      this.getNewLines(2)));

  private String sourceCodeSuffix = String.join("", List.of(
      this.getIndentation(1),
      "}",
      this.getNewLines(2),
      this.getIndentation(1),
      "public static Symbol recordSymbol(String lexeme, TokenKind kind) {",
      this.getNewLines(1),
      this.getIndentation(2),
      "Symbol s = symbols.get(lexeme);",
      this.getNewLines(2),
      this.getIndentation(2),
      "if (s == null) {",
      this.getNewLines(1),
      this.getIndentation(3),
      "if (kind == TokenKind.BogusToken) {",
      this.getNewLines(1),
      this.getIndentation(4),
      this.getComment("bogus string so don't enter into symbols"),
      this.getNewLines(1),
      this.getIndentation(4),
      "return null;",
      this.getNewLines(1),
      this.getIndentation(3),
      "}",
      this.getNewLines(2),
      this.getIndentation(3),
      "s = new Symbol(lexeme, kind);",
      this.getNewLines(1),
      this.getIndentation(3),
      "symbols.put(lexeme, s);",
      this.getNewLines(1),
      this.getIndentation(2),
      "}",
      this.getNewLines(2),
      this.getIndentation(2),
      "return s;",
      this.getNewLines(1),
      this.getIndentation(1),
      "}",
      this.getNewLines(1),
      "}",
      this.getNewLines(1)));

  @Override
  public void regenerateSourceFile() {
    try (FileWriter writer = new FileWriter(LexerConfiguration.UNIQUE_SYMBOL_MAP_FILE_PATH.toFile())) {
      writer.write(sourceCodePrefix);

      while (this.hasNext()) {
        writer.write(this.getInsertKeywordSymbolLine());
      }

      writer.write(sourceCodeSuffix);
    } catch (IOException exception) {
      this.failExecution(exception);
    }
  }

  private String getInsertKeywordSymbolLine() {
    StringBuffer buffer = new StringBuffer();

    String[] entries = this.next().split("\\s+");

    buffer.append(this.getIndentation(2));
    buffer.append(
        String.format("symbols.put(\"%s\", new Symbol(\"%s\", TokenKind.%s));", entries[1], entries[1], entries[0]));
    buffer.append(this.getNewLines(1));

    return buffer.toString();
  }

}
